{"version":3,"sources":["components/ToDoListHeader.tsx","components/ToDo.tsx","components/ToDoList.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ToDoListHeader","addToDo","useState","currentToDo","setCurrent","addClickHandler","todo","key","Date","valueOf","span","placeholder","value","onChange","e","currentTarget","onKeyDown","code","onClick","ToDo","item","deleteClickHandler","setUpdate","noneditable","setEditable","ref1","useRef","editClickHandler","prev","useEffect","current","focus","Item","className","type","disabled","id","toString","target","onBlur","ref","DeleteOutlined","EditOutlined","EditFilled","twoToneColor","ToDoList","data","setData","window","localStorage","getItem","JSON","parse","setItem","stringify","todoText","keyEL","found","findIndex","el","slice","orientation","size","header","bordered","dataSource","renderItem","keyEl","filtered","filter","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0a0f78da.chunk.js","sourcesContent":["import { Button, Col, Input, Row } from \"antd\"\r\nimport React, { useState } from \"react\"\r\nimport { ITodo } from \"./ToDoList\";\r\n\r\n\r\ntype Props = {\r\n    addToDo: (arg0: ITodo) => void;\r\n}\r\n\r\nexport const ToDoListHeader = ({ addToDo }: Props) => {\r\n    const [currentToDo, setCurrent] = useState('');\r\n\r\n    const changeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setCurrent(e.currentTarget.value);\r\n    }\r\n    const addClickHandler = () => {\r\n        if(currentToDo === \"\") return;\r\n        addToDo({todo: currentToDo, key: new Date().valueOf()});\r\n        setCurrent('');\r\n    }\r\n\r\n    const keyDownHandler = (e: React.KeyboardEvent<HTMLInputElement>) => {\r\n        if(e.code === 'Enter') {\r\n            addClickHandler();\r\n        }\r\n    }\r\n\r\n    return (<Row>\r\n        <Col span={22}>\r\n            <Input placeholder=\"Write new todo\"\r\n                value={currentToDo}\r\n                onChange={changeHandler}\r\n                onKeyDown={keyDownHandler} />\r\n        </Col>\r\n        <Col span={2}>\r\n            <Button onClick={addClickHandler}>Add</Button>\r\n        </Col>\r\n    </Row>\r\n\r\n    )\r\n}","import { Col, List } from \"antd\";\r\nimport { DeleteOutlined, EditFilled, EditOutlined } from '@ant-design/icons';\r\nimport { ITodo } from \"./ToDoList\";\r\nimport React, { useEffect, useRef, useState } from \"react\";\r\n\r\n\r\n\r\ntype Props = {\r\n    item: ITodo,\r\n    deleteClickHandler: () => void;\r\n    setUpdate: (arg0: string, arg1: React.Key) => void;\r\n}\r\n\r\nexport const ToDo = ({ item, deleteClickHandler, setUpdate }: Props) => {\r\n    const [noneditable, setEditable] = useState<boolean>(true);\r\n    type TRef = { current: HTMLInputElement | null };\r\n    const ref1: TRef = useRef<HTMLInputElement>(null);\r\n\r\n    const editClickHandler = () => {\r\n        setEditable(prev => !prev);\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (!noneditable) {\r\n            if (ref1 && ref1.current) {\r\n                ref1.current.focus();\r\n            }\r\n        }\r\n    }, [noneditable])\r\n\r\n\r\n    return (\r\n        <List.Item >\r\n            <Col span={20}>\r\n                <div className=\"list\">\r\n                    <p>\r\n                        <input type=\"text\"\r\n                            disabled={noneditable}\r\n                            id={item.key.toString()}\r\n                            value={item.todo}\r\n                            onChange={(e) => { setUpdate(e.target.value, item.key) }}\r\n                            onBlur={() => setEditable(prev => !prev)}\r\n                            ref={ref1}\r\n                        />\r\n                    </p>\r\n                </div>\r\n            </Col>\r\n            <Col span={2} >\r\n                <DeleteOutlined onClick={deleteClickHandler} className='deleteButton' />\r\n            </Col>\r\n            <Col span={2} >\r\n                {noneditable ? <EditOutlined onClick={editClickHandler} /> :\r\n                    <EditFilled twoToneColor=\"#eb2f96\" onClick={editClickHandler} />}\r\n            </Col>\r\n        </List.Item>\r\n\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Divider, List } from 'antd';\r\nimport { ToDoListHeader } from './ToDoListHeader';\r\nimport { ToDo } from './ToDo';\r\n\r\n\r\n\r\nexport interface ITodo {\r\n    todo: string;\r\n    key: React.Key;\r\n}\r\n\r\n\r\n\r\nexport const ToDoList = () => {\r\n\r\n    const [data, setData] = useState<ITodo[]>([\r\n        {\r\n            todo: 'Learn GraphQL and gRPC',\r\n            key: '16520'\r\n        },\r\n        {\r\n            todo: 'Add COOKIE Notification',\r\n            key: '16521'\r\n        },\r\n        {\r\n            todo: 'Refactor last week code',\r\n            key: '16522'\r\n        },\r\n        {\r\n            todo: 'Help the dog to find itself in that holly world',\r\n            key: '16523'\r\n        },\r\n        {\r\n            todo: 'Read: Los Angeles battles huge wildfires.',\r\n            key: '16525'\r\n        },\r\n    ]);\r\n\r\n    useEffect(() => {    \r\n        const item = window.localStorage.getItem('myToDos');\r\n        if (item) {\r\n            setData(JSON.parse(item));\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => { \r\n        window.localStorage.setItem('myToDos', JSON.stringify(data));\r\n    },[data])\r\n\r\n    const addToDo = (todo: ITodo): void => {\r\n        setData([...data, todo]);\r\n    }\r\n\r\n    const deleteClickHandler = (keyEl: React.Key) => {\r\n        const filtered = data.filter(el => el.key !== keyEl);\r\n        setData(filtered);\r\n    }\r\n\r\n    const setUpdate = (todoText: string, keyEL: React.Key) => {\r\n        const found = data.findIndex(el => el.key === keyEL);\r\n        setData(\r\n            [...data.slice(0, found),\r\n            { todo: todoText, key: keyEL },\r\n            ...data.slice(found + 1)]\r\n        );\r\n    }\r\n\r\n\r\n    return (\r\n        <div className='width_40'>\r\n            <Divider orientation=\"left\">My ToDo List</Divider>\r\n            <List\r\n                size=\"large\"\r\n                header={<ToDoListHeader addToDo={addToDo} />}\r\n                bordered\r\n                dataSource={data}\r\n                renderItem={item => <ToDo item={item}\r\n                    deleteClickHandler={() => deleteClickHandler(item.key)}\r\n                    setUpdate={setUpdate} />}\r\n            />\r\n        </div>)\r\n}","\nimport './App.css';\nimport { ToDoList } from './components/ToDoList'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n        <ToDoList />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}